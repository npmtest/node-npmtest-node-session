{"/home/travis/build/npmtest/node-npmtest-node-session/test.js":"/* istanbul instrument in package npmtest_node_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-session/lib.npmtest_node_session.js":"/* istanbul instrument in package npmtest_node_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_session.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_session.__dirname + '/lib.npmtest_node_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/index.js":"/**\n * index.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2015, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nvar SessionManager = require('./lib/SessionManager');\nvar onHeaders = require('on-headers');\nvar _ = require('lodash');\nvar signature = require('cookie-signature');\nvar cookie = require('cookie');\nvar util = require('./lib/util');\n\n/**\n * Create a new NodeSession instance\n *\n * @param {Object} config - session configuration object\n * @param {Object | void} encrypter\n * @constructor\n */\nfunction NodeSession(config, encrypter) {\n    var defaults = {\n        'driver': 'file',\n        'lifetime': 300000, // five minutes\n        'expireOnClose': false,\n        'files': process.cwd()+'/sessions',\n        'connection': false,\n        'table': 'sessions',\n        'lottery': [2, 100],\n        'cookie': 'node_session',\n        'path': '/',\n        'domain': null,\n        'secure': false,\n        'httpOnly': true,\n        'encrypt': false\n    };\n\n    /**\n     * The Session configuration\n     *\n     * @type {Object}\n     * @private\n     */\n    this.__config = _.merge(defaults, config);\n\n    if(this.__config.trustProxy && !this.__config.trustProxyFn) {\n        this.__config.trustProxyFn = util.compileTrust(this.__config.trustProxy)\n    }\n\n    /**\n     * The session manager instance\n     * @type {SessionManager}\n     * @private\n     */\n    this.__manager = new SessionManager(this.__config, encrypter);\n\n    if (!this.__config.secret) {\n        throw new Error('secret option required for sessions');\n    }\n}\n\n/**\n * Start session for a given http request - response\n *\n * @param {Object} request - http request object\n * @param {Object} response - http response object\n * @param {function} callback\n */\nNodeSession.prototype.startSession = function (request, response, callback) {\n    var self = this;\n    var end = response.end;\n    var ended = false;\n\n    // Set cookie to response headers before headers are sent\n    onHeaders(response, function () {\n        self.__addCookieToResponse(request, response);\n    });\n\n    // Proxy response.end to close session before request end\n    response.end = function () {\n        var endArguments = arguments;\n\n        if (ended) {\n            return false;\n        }\n\n        ended = true;\n\n        self.__closeSession(request.session, function (err) {\n            if(err) {\n                throw err;\n            }\n            end.apply(response, endArguments);\n        });\n\n    };\n\n    // start the session for the request\n    this.__startSession(request, callback);\n};\n\n/**\n * Start the session for the given request.\n *\n * @param {Object} request - http request object\n * @param {function} callback\n * @private\n */\nNodeSession.prototype.__startSession = function (request, callback) {\n    this.getSession(request, function(session) {\n        request.session = session;\n\n        session.start(callback);\n    });\n};\n\n/**\n * Get the session implementation from the manager.\n *\n * @param {Object} request - http request object\n * @param {function} callback - callback to return session object\n */\nNodeSession.prototype.getSession = function (request, callback) {\n    var self = this;\n    this.__manager.driver(null, function(session){\n        session.setId(self.__getCookie(request, session.getName()));\n\n        callback(session);\n    });\n};\n\n/**\n * Add the session cookie to the application response.\n *\n * @param {Object} request - http request object\n * @param {Object} response - http response object\n * @private\n */\nNodeSession.prototype.__addCookieToResponse = function (request, response) {\n    var config = this.__config;\n    var session = request.session;\n    var maxAge = this.__getCookieLifetime();\n    var data = {\n        signed: true,\n        path: config.path,\n        domain: config.domain,\n        secure: config.secure,\n        httpOnly: config.httpOnly\n    };\n\n    // maxAge = 0 => cookie expire on browser close.\n    // so no need to set maxAge.\n    if (maxAge !== 0) {\n        data.maxAge = maxAge;\n    }\n\n    this.__setCookie(\n        request,\n        response,\n        session.getName(),\n        session.getId(),\n        data\n    );\n};\n\n/**\n * Get the cookie lifetime in seconds.\n *\n * @return {Number}\n * @private\n */\nNodeSession.prototype.__getCookieLifetime = function () {\n    var config = this.__config;\n\n    return config.expireOnClose ? 0 : config.lifetime;\n};\n\n/**\n * Closes the given session.\n *\n * @param {Object} session - the session object\n * @param {function} callback\n * @private\n */\nNodeSession.prototype.__closeSession = function (session, callback) {\n    session.save(callback);\n    //@todo: note callback is executed after save, not waiting for garbage collection to complete\n    this.__collectGarbage(session);\n};\n\n/**\n * Remove the garbage from the session if necessary.\n *\n * @param {Object} session - the session object\n * @private\n */\nNodeSession.prototype.__collectGarbage = function (session) {\n    // Here we will see if this request hits the garbage collection lottery by hitting\n    // the odds needed to perform garbage collection on any given request. If we do\n    // hit it, we'll call this handler to let it delete all the expired sessions.\n    if (this.__configHitsLottery()) {\n        session.getHandler().gc && session.getHandler().gc(this.__config.lifetime);\n    }\n};\n\n/**\n * Determine if the configuration odds hit the lottery.\n *\n * @return {Boolean}\n * @private\n */\nNodeSession.prototype.__configHitsLottery = function () {\n    return (_.random(1, this.__config['lottery'][1]) <= this.__config['lottery'][0]);\n};\n\n/**\n * Add session cookie to response\n *\n * @param {Object} request - http request object\n * @param {Object} response - http response object\n * @param {String} name - cookie name\n * @param {*} val - cookie value\n * @param {*} options\n * @private\n */\nNodeSession.prototype.__setCookie = function (request, response, name, val, options) {\n    options = _.merge({}, options);\n\n    // only send secure cookies via https\n    if (!(options.secure && !this.__isSecure(request))) {\n        var secret = this.__config.secret;\n        var signed = options.signed;\n\n        if (signed && !secret) {\n            throw new Error('An encryption key is required for signed cookies');\n        }\n\n        if ('number' == typeof val) {\n            val = val.toString();\n        }\n\n        if ('object' == typeof val) {\n            val = 'j:' + JSON.stringify(val);\n        }\n\n        if (signed) {\n            val = 's:' + signature.sign(val, secret);\n        }\n\n        if ('maxAge' in options) {\n            options.expires = new Date(Date.now() + options.maxAge);\n            options.maxAge /= 1000;\n        }\n\n        if (null == options.path) {\n            options.path = '/';\n        }\n\n        var headerVal = cookie.serialize(name, String(val), options);\n\n        // supports multiple 'setCookie' calls by getting previous value\n        var prev = response.getHeader('set-cookie') || [];\n        var header = Array.isArray(prev) ? prev.concat(headerVal)\n            : Array.isArray(headerVal) ? [prev].concat(headerVal)\n            : [prev, headerVal];\n\n        response.setHeader('set-cookie', header);\n    }\n};\n\n/**\n * Check whether request is secure\n *\n * @param {Object} request - http request object\n * @return {boolean}\n * @private\n */\nNodeSession.prototype.__isSecure = function (request) {\n    var proto;\n\n    // socket is https server\n    if (request.connection && request.connection.encrypted) {\n        proto = 'https'\n    } else {\n        proto = 'http';\n    }\n\n    if (this.__config.trustProxy &&\n        this.__config.trustProxyFn &&\n        this.__config.trustProxyFn(request.connection.remoteAddress, 0)) {\n        // Note: X-Forwarded-Proto is normally only ever a\n        //       single value, but this is to be safe.\n        // read the proto from x-forwarded-proto header\n        var header = request.headers['x-forwarded-proto'] || '';\n        var index = header.indexOf(',');\n        proto = (index !== -1\n            ? header.substr(0, index).toLowerCase().trim()\n            : header.toLowerCase().trim()) || proto;\n    }\n\n    return proto === 'https';\n};\n\n/**\n * Get the session ID cookie from request.\n *\n * @return {string} session id\n * @private\n */\nNodeSession.prototype.__getCookie = function (request, name) {\n    // if signed cookie is already present in request(means cookie\n    // parsing is already done), we will use it straight.\n    if (request.signedCookies) {\n        return request.signedCookies[name];\n    }\n\n    var header = request.headers.cookie;\n    var raw;\n    var val;\n\n    // read from cookie header\n    if (header) {\n        var cookies = cookie.parse(header);\n\n        raw = cookies[name];\n\n        if (raw) {\n            if (raw.substr(0, 2) === 's:') {\n                val = this.__unsignCookie(raw.slice(2));\n\n                if (val === false) {\n                    //console.error('cookie signature invalid');\n                    val = undefined;\n                }\n            }\n        }\n    }\n\n    return val;\n};\n\n/**\n * Unsign a cookie value\n *\n * @param {String} val\n * @returns {String|Boolean}\n * @private\n */\nNodeSession.prototype.__unsignCookie = function (val) {\n    return signature.unsign(val, this.__config.secret);\n};\n\n/**\n * Update session manager encrypter service.\n *\n * @param {Object} encrypter\n */\nNodeSession.prototype.setEncrypter = function (encrypter) {\n    this.__manager.setEncrypter(encrypter);\n};\n\n\nmodule.exports = NodeSession;","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/lib/SessionManager.js":"/**\n * SessionManager.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2015, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nvar FileSessionHandler = require('./handler/FileSessionHandler');\nvar MemorySessionHandler = require('./handler/MemorySessionHandler');\nvar DatabaseSessionHandler = require('./handler/DatabaseSessionHandler');\nvar Store = require('./store/Store');\nvar EncryptedStore = require('./store/EncryptedStore');\nvar Waterline = require('waterline');\n\n/**\n * Create a session manager instance.\n *\n * @param {Object} config\n * @param {Object} [encrypter]\n *\n * @constructor\n */\nfunction SessionManager(config, encrypter) {\n    /**\n     * The configuration object\n     *\n     * @var Object\n     * @protected\n     */\n    this.__config = config;\n\n    /**\n     * The registered custom driver creators.\n     *\n     * @var Object\n     * @protected\n     */\n    this.__customCreators = {};\n\n    /**\n     * The encrypter instance.\n     * An encrypter implements encrypt and decrypt methods.\n     *\n     * @var Object\n     * @protected\n     */\n    this.__encrypter = encrypter;\n\n    /**\n     * The session database model instance\n     *\n     * @var Object\n     * @protected\n     */\n    this.__sessionModel;\n\n    /**\n     * The memory session handler storage\n     * @type {null}\n     * @protected\n     */\n    this.__memorySession = Object.create(null);\n}\n\n/**\n * Get the default driver name.\n *\n * @return {String}\n */\nSessionManager.prototype.getDefaultDriver = function () {\n    return this.__config.driver;\n};\n/**\n * Get a driver instance.\n *\n * @param  {string} driver\n * @param {function} callback\n */\nSessionManager.prototype.driver = function (driver, callback) {\n    driver = driver ? driver : this.getDefaultDriver();\n\n    this.__createDriver(driver, callback);\n};\n\n/**\n * Create a new driver instance.\n *\n * @param  {String} driver\n * @param  {function} callback\n * throws Error if specified given driver creator method doesn't exists.\n * @protected\n */\nSessionManager.prototype.__createDriver = function (driver, callback) {\n    var method = '__create' + driver.charAt(0).toUpperCase() + driver.slice(1) + 'Driver';\n\n    // We'll check to see if a creator method exists for the given driver. If not we\n    // will check for a custom driver creator, which allows developers to create\n    // drivers using their own customized driver creator Closure to create it.\n    if (this.__customCreators[driver]) {\n        return this.__callCustomCreator(driver, callback);\n    } else if (typeof this[method] === 'function') {\n        return this[method](callback);\n    }\n\n    throw new Error(\"Driver \" + driver + \" not supported.\");\n};\n\n/**\n * Call a custom driver creator.\n *\n * @param  {String} driver\n * @param  {function} callback\n * @protected\n */\nSessionManager.prototype.__callCustomCreator = function (driver, callback) {\n    this.__customCreators[driver](this.__config, callback);\n};\n\n/**\n * Register a custom driver creator Closure.\n *\n * @param  {String} driver\n * @param  {function} handler\n * @return {SessionManager}\n */\nSessionManager.prototype.registerHandler = function(driver, handler) {\n    this.__customCreators[driver] = handler;\n\n    return this;\n};\n\n/**\n * Create an instance of the memory session driver.\n *\n * @param {function} callback to return session driver instance\n * @protected\n */\nSessionManager.prototype.__createMemoryDriver = function (callback) {\n    callback(this.__buildSession(new MemorySessionHandler(this.__memorySession)));\n};\n\n/**\n * Create an instance of the file session driver.\n *\n * @param {function} callback to return session driver instance\n * @protected\n */\nSessionManager.prototype.__createFileDriver = function (callback) {\n    return this.__createNativeDriver(callback);\n};\n\n/**\n * Create an instance of the file session driver.\n *\n * @param {function} callback to return session driver instance\n * @protected\n */\nSessionManager.prototype.__createNativeDriver = function (callback) {\n    var path = this.__config.files;\n\n    callback(this.__buildSession(new FileSessionHandler(path)));\n};\n\n\n/**\n * Create an instance of the database session driver.\n *\n * @return {Object} Session driver instance\n * @protected\n */\nSessionManager.prototype.__createDatabaseDriver = function (callback) {\n    var self = this;\n\n    this.__getSessionModel(function(model) {\n        callback(self.__buildSession(new DatabaseSessionHandler(model)))\n    });\n};\n\n/**\n * Get the database session table model for the database driver.\n *\n * @param {function} callback\n * @protected\n */\nSessionManager.prototype.__getSessionModel = function (callback) {\n    if (!this.__sessionModel) {\n        var self = this;\n        this.__createSessionModel(function(model) {\n            self.__sessionModel = model;\n            callback(self.__sessionModel);\n        });\n    } else {\n        callback(this.__sessionModel)\n    }\n};\n\n/**\n * Create a waterline session model instance\n *\n * @param {function} callback\n * @protected\n */\nSessionManager.prototype.__createSessionModel = function (callback) {\n    var self = this;\n    var adapters = {};\n    var orm = new Waterline();\n    var SessionModel = Waterline.Collection.extend({\n        identity: this.__config.table,\n        connection: this.__config.table,\n        migrate: 'safe',\n        autoCreatedAt: false,\n        autoUpdatedAt: false,\n        attributes: {\n            id: {\n                type: 'string',\n                unique: true\n            },\n            payload: 'string',\n            lastActivity: 'integer'\n        }\n    });\n\n    // Load the Models into the ORM\n    orm.loadCollection(SessionModel);\n\n    adapters[this.__config.connection.adapter] = require(this.__config.connection.adapter);\n\n    // Tear down previous session adapter connection with same adapter.\n    adapters[this.__config.connection.adapter].teardown(this.__config.table, function(){});\n\n    var initConf = {\n        adapters: adapters,\n        connections:{}\n    };\n    initConf.connections[this.__config.table] = this.__config.connection;\n\n    orm.initialize(initConf, function (err, models) {\n        if (err) {\n            throw err;\n        }\n\n        SessionModel = models.collections[self.__config.table];\n        callback(SessionModel);\n    });\n};\n\n/**\n * Build the session instance.\n *\n * @param  handler\n * @return {Object} Session instance\n */\nSessionManager.prototype.__buildSession = function (handler) {\n    if (this.__config.encrypt) {\n        return new EncryptedStore(\n            this.__config.cookie, handler, this.__encrypter, this.__config.secret\n        );\n    } else {\n        return new Store(this.__config.cookie, handler);\n    }\n};\n\n/**\n * Update session encrypter service.\n *\n * @param {Object} encrypter\n */\nSessionManager.prototype.setEncrypter = function (encrypter) {\n    this.__encrypter = encrypter;\n};\n\nmodule.exports = SessionManager;","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/lib/handler/FileSessionHandler.js":"/**\n * FileSessionHandler.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2015, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nvar fs = require('fs-extra');\nvar path = require('path');\n\nfunction FileSessionHandler(path) {\n    /**\n     * The path where sessions should be stored.\n     *\n     * @type {String}\n     */\n    this.__path = path;\n\n    /**\n     * Create directory for session storage.\n     */\n    fs.mkdirsSync(this.__path);\n}\n\n/**\n * Reads the session data.\n *\n * @param {String} sessionId\n * @param {function} callback\n */\nFileSessionHandler.prototype.read = function (sessionId, callback) {\n    fs.readFile(path.join(this.__path, sessionId), 'utf-8', function (err, file) {\n        if (err) {\n            file = '';\n        }\n        if (callback) {\n            callback(file);\n        }\n    });\n};\n\n/**\n * Writes the session data to the storage.\n *\n * @param {String} sessionId\n * @param {String} data\n * @param {function} callback\n */\nFileSessionHandler.prototype.write = function (sessionId, data, callback) {\n    fs.writeFile(path.join(this.__path, sessionId), data, 'utf-8', function (err) {\n        if (callback) {\n            callback(err);\n        }\n    });\n};\n\n/**\n * Destroys a session.\n *\n * @param {String} sessionId\n * @param {function} callback\n */\nFileSessionHandler.prototype.destroy = function (sessionId, callback) {\n    fs.unlink(path.join(this.__path, sessionId), function (err) {\n        if (callback) {\n            callback(err)\n        }\n    })\n};\n\n/**\n * Cleans up expired sessions (garbage collection).\n *\n * @param {String|number} maxAge Sessions that have not updated for the last maxAge seconds will be removed\n */\nFileSessionHandler.prototype.gc = function (maxAge) {\n    var self = this;\n\n    fs.readdir(self.__path, function (err, files) {\n        if (err || files.length === 0) {\n            return;\n        }\n        files.forEach(function (file) {\n            if (file[0] != '.') {\n                fs.stat(path.join(self.__path, file), function (err, stat) {\n                    if (!err) {\n                        if (stat.isFile() && ((new Date()).getTime() - stat.atime.getTime() > maxAge)) {\n                            self.destroy(file);\n                        }\n                    }\n                });\n            }\n        });\n    });\n};\n\nmodule.exports = FileSessionHandler;","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/lib/handler/MemorySessionHandler.js":"/**\n * MemorySessionHandler.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2016, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nfunction MemorySessionHandler(session) {\n    /**\n     * Object to keep all the sessions\n     *\n     * @type {Object}\n     * @private\n     */\n\n    this.__sessions = session;\n}\n\n/**\n * Reads the session data.\n *\n * @param {String} sessionId\n * @param {function} callback\n */\nMemorySessionHandler.prototype.read = function (sessionId, callback) {\n    callback(this.__sessions[sessionId]||'');\n};\n\n/**\n * Writes the session data to the storage.\n *\n * @param {String} sessionId\n * @param {String} data\n * @param {function} callback\n */\nMemorySessionHandler.prototype.write = function (sessionId, data, callback) {\n    this.__sessions[sessionId] = data;\n    callback();\n};\n\n/**\n * Destroys a session.\n *\n * @param {String} sessionId\n * @param {function} callback\n */\nMemorySessionHandler.prototype.destroy = function (sessionId, callback) {\n    delete this.__sessions[sessionId];\n    if (callback) {\n        callback()\n    }\n};\n\nmodule.exports = MemorySessionHandler;","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/lib/handler/DatabaseSessionHandler.js":"/**\n * DatabaseSessionHandler.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2015, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nfunction DatabaseSessionHandler(model) {\n    /**\n     * Session table waterline model instance.\n     *\n     * @type {Object}\n     * @private\n     */\n    this.__model = model;\n\n    /**\n     * The existence state of the session.\n     *\n     * @type {Boolean}\n     */\n    this.__exists;\n}\n\n/**\n * Reads the session data.\n *\n * @param {String} sessionId\n * @param {function} callback\n */\nDatabaseSessionHandler.prototype.read = function (sessionId, callback) {\n    var self = this;\n    var response = '';\n\n    this.__model.findOne(sessionId, function (err, session) {\n        if (!err && session && session.payload) {\n            self.__exists = true;\n\n            response = JSON.parse(session.payload);\n        }\n\n        if (callback) {\n            callback(response);\n        }\n    });\n};\n\n/**\n * Writes the session data to the storage.\n *\n * @param {String} sessionId\n * @param {String} data\n * @param {function} callback\n */\nDatabaseSessionHandler.prototype.write = function (sessionId, data, callback) {\n    var self = this;\n    if (this.__exists) {\n        this.__model.update(sessionId,\n            {payload: JSON.stringify(data), lastActivity: (new Date()).getTime()},\n            function (err, record) {\n                if (!err) {\n                    self.__exists = true;\n                }\n\n                if (callback) {\n                    callback(err);\n                }\n            }\n        );\n    }\n    else {\n        this.__model.create(\n            {\n                id: sessionId,\n                payload: JSON.stringify(data),\n                lastActivity: (new Date()).getTime()\n            },\n            function (err, record) {\n                if (!err) {\n                    self.__exists = true;\n                }\n\n                if (callback) {\n                    callback(err);\n                }\n            }\n        );\n    }\n\n};\n\n/**\n * Destroys a session.\n *\n * @param {String} sessionId\n * @param {function} callback\n */\nDatabaseSessionHandler.prototype.destroy = function (sessionId, callback) {\n    this.__model.destroy(sessionId, function (err) {\n        if (callback) {\n            callback(err);\n        }\n    })\n};\n\n/**\n * Cleans up expired sessions (garbage collection).\n *\n * @param {String|number} maxAge Sessions that have not updated for the last maxAge seconds will be removed\n */\nDatabaseSessionHandler.prototype.gc = function (maxAge) {\n    var age = (new Date()).getTime() - maxAge;\n    this.__model.destroy({lastActivity: {'<': age}}, function (err) {\n    });\n};\n\n/**\n * Set the existence state for the session.\n *\n * @param  {Boolean} value\n * @return {DatabaseSessionHandler}\n */\nDatabaseSessionHandler.prototype.setExists = function (value) {\n    this.__exists = value;\n\n    return this;\n};\n\nmodule.exports = DatabaseSessionHandler;","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/lib/store/Store.js":"/**\n * Store.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2015, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nvar uid = require('uid-safe').sync;\nvar _ = require('lodash');\nvar dotAccess = require('dot-access');\nvar util = require('./../util');\n\n/**\n * Create a new session instance.\n *\n * @param  {String} name\n * @param  {Object} handler\n * @param  {String|null} id\n */\nfunction Store(name, handler, id) {\n    this.setId(id);\n    this.__name = name;\n    this.__handler = handler;\n\n    /**\n     * The session attributes.\n     *\n     * @var {Object}\n     * @protected\n     */\n    this.__attributes = {};\n\n    /**\n     * Session store started status.\n     *\n     * @var {Boolean}\n     */\n    this.__started = false;\n}\n\n/**\n * Returns the session ID.\n *\n * @return {String} The session ID.\n */\nStore.prototype.setId = function (id) {\n    if (!this.__isValidId(id)) {\n        id = this.__generateSessionId();\n    }\n\n    this.__id = id;\n};\n\n/**\n * Determine if given id is a valid session ID.\n *\n * @param  {String}  id\n * @return {Boolean}\n * @protected\n */\nStore.prototype.__isValidId = function (id) {\n    return typeof id === 'string' && /^[A-Za-z0-9-_]{40}$/.test(id);\n};\n\n/**\n * Get a new, random session ID.\n *\n * @return {String}\n * @protected\n */\nStore.prototype.__generateSessionId = function () {\n    return uid(30);\n};\n\n/**\n * Returns the session name.\n *\n * @return {String} The session name.\n */\nStore.prototype.getName = function () {\n    return this.__name;\n};\n\n/**\n * Starts the session storage.\n *\n * @return {Boolean} True if session started.\n * @throws Error If session fails to start.\n */\nStore.prototype.start = function (callback) {\n    var self = this;\n\n    this.__loadSession(function () {\n        if (!self.__attributes['_token']) {\n            self.regenerateToken();\n        }\n\n        self.__started = true;\n\n        callback();\n    });\n};\n\n/**\n * Checks if an attribute is defined.\n *\n * @param {string} name The attribute name\n * @return {Boolean} true if the attribute is defined, false otherwise\n */\nStore.prototype.has = function (name) {\n    return this.get(name) != undefined;\n};\n\n/**\n * Load the session data from the handler.\n *\n * @param {function} callback\n * @protected\n */\nStore.prototype.__loadSession = function (callback) {\n    var self = this;\n\n    this.__readFromHandler(function (data) {\n        self.__attributes = _.merge(self.__attributes, data);\n        callback();\n    });\n\n};\n\n/**\n * Read the session data from the handler.\n *\n * @param {function} callback\n */\nStore.prototype.__readFromHandler = function (callback) {\n    var self = this;\n\n    this.__handler.read(this.getId(), function afterRead(data) {\n        if (data) {\n            try {\n                data = JSON.parse(self.__prepareForParse(data));\n            } catch (e) {\n\n            }\n        }\n\n        callback(data ? data : {});\n    });\n};\n\n/**\n * Prepare the raw string data from the session for JSON parse.\n *\n * @param  {String} data\n * @return {String}\n */\nStore.prototype.__prepareForParse = function (data) {\n    return data;\n};\n\n\n/**\n * Returns the session ID.\n *\n * @return {String} The session ID.\n */\nStore.prototype.getId = function () {\n    return this.__id;\n};\n\n/**\n * Get the value of a given key and then forget it.\n *\n * @param  {String}  key\n * @param  {*}  defaultValue\n * @return {*}\n */\nStore.prototype.pull = function (key, defaultValue) {\n    if (defaultValue === undefined) {\n        defaultValue = null;\n    }\n\n    if (this.__attributes[key]) {\n        defaultValue = this.__attributes[key];\n        delete this.__attributes[key]\n    }\n\n    return defaultValue;\n};\n\n/**\n * Returns an attribute.\n *\n * @param {String} name The attribute name\n * @param {*} defaultValue The default value if not found.\n *\n * @return {*}\n */\nStore.prototype.get = function (name, defaultValue) {\n    var value = dotAccess.get(this.__attributes, name);\n    return value === undefined ? defaultValue : value;\n};\n\n/**\n * Returns attributes.\n *\n * @return {Object} Attributes\n */\nStore.prototype.all = function () {\n    return this.__attributes;\n};\n\n/**\n * Sets an attribute.\n *\n * @param {string} name\n * @param {*} value\n */\nStore.prototype.set = function (name, value) {\n    try {\n        dotAccess.set(this.__attributes, name, value);\n    } catch (e) {\n        util.defineMember(this.__attributes, name);\n        dotAccess.set(this.__attributes, name, value);\n    }\n\n};\n\n/**\n * Regenerate the CSRF token value.\n */\nStore.prototype.regenerateToken = function () {\n    this.put('_token', uid(30));\n};\n\n/**\n * Put a key / value pair or Object of key / value pairs in the session.\n *\n * @param  {String|Object}  key\n * @param  {*|null}     value\n */\nStore.prototype.put = function (key, value) {\n    if (!_.isObject(key)) {\n        var temp = {};\n        temp[key] = value;\n        key = temp;\n    }\n\n    var objKey;\n\n    for (objKey in key) {\n        if (key.hasOwnProperty(objKey)) {\n            this.set(objKey, key[objKey])\n        }\n    }\n};\n\n/**\n * Push a value onto a session array.\n *\n * @param  {string}  key\n * @param  {*}   value\n */\nStore.prototype.push = function (key, value) {\n    var array = this.get(key, []);\n    if (_.isArray(array)) {\n        array.push(value);\n\n        this.put(key, array);\n    }\n};\n\n/**\n * Force the session to be saved and closed.\n * @param {function} callback\n */\nStore.prototype.save = function (callback) {\n    this.ageFlashData();\n\n    var self = this;\n\n    this.__handler.write(this.getId(), this.__prepareForStorage(JSON.stringify(this.__attributes)), function (err) {\n        self.__started = false;\n        callback(err);\n    });\n};\n\n/**\n * Prepare the JSON string session data for storage.\n *\n * @param  {String} data\n * @return {String}\n */\nStore.prototype.__prepareForStorage = function (data) {\n    return data;\n};\n\n/**\n * Age the flash data for the session.\n */\nStore.prototype.ageFlashData = function () {\n    var self = this;\n\n    this.get('flash.old', []).forEach(function (old) {\n        self.forget(old);\n    });\n\n    this.put('flash.old', this.get('flash.new', []));\n\n    this.put('flash.new', []);\n};\n\n/**\n * Remove an item from the session.\n *\n * @param  {string} key\n */\nStore.prototype.forget = function (key) {\n    delete this.__attributes[key];\n};\n\n/**\n * Remove all of the items from the session.\n */\nStore.prototype.flush = function () {\n    this.__attributes = {};\n};\n\n/**\n * Generate a new session identifier.\n *\n * @param  {Boolean} destroy\n * @return {Boolean}\n */\nStore.prototype.regenerate = function (destroy) {\n    if (destroy) {\n        this.__handler.destroy(this.getId());\n    }\n\n    this.setExists(false);\n\n    this.setId();\n\n    return true;\n};\n\n/**\n * Set the existence of the session on the handler if applicable.\n *\n * @param  {Boolean}  value\n */\nStore.prototype.setExists = function (value) {\n    if (_.isFunction(this.__handler.setExists)) {\n        this.__handler.setExists(value);\n    }\n};\n\n/**\n * Get the underlying session handler implementation.\n */\nStore.prototype.getHandler = function () {\n    return this.__handler;\n};\n\n/**\n * Flash a key / value pair to the session.\n *\n * @param  {String}  key\n * @param  {*}   value\n */\nStore.prototype.flash = function (key, value) {\n    this.put(key, value);\n\n    this.push('flash.new', key);\n\n    this.__removeFromOldFlashData([key]);\n};\n\n/**\n * Flash an input array to the session.\n *\n * @param  {Array} value\n */\nStore.prototype.flashInput = function(value)\n{\n    value = [].concat(value)\n    this.flash('_old_input', value);\n};\n\n/**\n * Remove the given keys from the old flash data.\n *\n * @param  {Array}  keys\n */\nStore.prototype.__removeFromOldFlashData = function (keys) {\n    this.put('flash.old', _.difference(this.get('flash.old', []), keys));\n};\n\n/**\n * Re-flash all of the session flash data.\n */\nStore.prototype.reflash = function () {\n    this.__mergeNewFlashes(this.get('flash.old', []));\n\n    this.put('flash.old', []);\n};\n\n/**\n * Merge new flash keys into the new flash array.\n *\n * @param  {Array}  keys\n * @protected\n */\nStore.prototype.__mergeNewFlashes = function (keys) {\n    var values = _.uniq((this.get('flash.new', [])).concat(keys));\n\n    this.put('flash.new', values);\n};\n\n/**\n * Re-flash a subset of the current flash data.\n *\n * @param  {Array|*}  keys\n */\nStore.prototype.keep = function (keys) {\n    keys = _.isArray(keys) ? keys : Array.prototype.slice.call(arguments);\n\n    this.__mergeNewFlashes(keys);\n\n    this.__removeFromOldFlashData(keys);\n};\n\n/**\n * Get the CSRF token value.\n *\n * @return {String}\n */\nStore.prototype.getToken = function() {\n    return this.get('_token');\n};\n\n/**\n * Migrates the current session to a new session id while maintaining all\n * session attributes.\n *\n * @param {boolean} destroy  Whether to delete the old session or leave it to garbage collection.\n * @return {boolean}   True if session migrated, false if error.\n */\nStore.prototype.migrate = function (destroy) {\n    if (destroy) {\n        this.__handler.destroy(this.getId());\n    }\n\n    this.setExists(false);\n    this.setId();\n\n    return true;\n};\n\n\nmodule.exports = Store;","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/lib/util.js":"/**\n * util.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2015, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nvar proxyaddr = require('proxy-addr');\n\nvar util = {};\n\n/**\n * Define a object key by dot notation\n *\n * @param {Object} obj\n * @param {String} name\n */\nutil.defineMember = function (obj, name) {\n    var nameSplit = name.split('.');\n    var i;\n    var exists = obj;\n\n    for (i = 0; i < nameSplit.length - 1; i++) {\n        if (!exists.hasOwnProperty(nameSplit[i]) || typeof exists[nameSplit[i]] !== 'object') {\n            exists[nameSplit[i]] = {};\n        }\n        exists = exists[nameSplit[i]]\n    }\n};\n\n/**\n * Compile \"proxy trust\" value to function.\n *\n * @param  {Boolean|String|Number|Array|Function} val\n * @return {Function}\n */\n\nutil.compileTrust = function(val) {\n    if (typeof val === 'function') return val;\n\n    if (val === true) {\n        // Support plain true/false\n        return function(){ return true };\n    }\n\n    if (typeof val === 'number') {\n        // Support trusting hop count\n        return function(a, i){ return i < val };\n    }\n\n    if (typeof val === 'string') {\n        // Support comma-separated values\n        val = val.split(/ *, */);\n    }\n\n    return proxyaddr.compile(val || []);\n};\n\nmodule.exports = util;","/home/travis/build/npmtest/node-npmtest-node-session/node_modules/node-session/lib/store/EncryptedStore.js":"/**\n * EncryptedStore.js\n *\n * @author: Harish Anchu <harishanchu@gmail.com>\n * @copyright 2015, Harish Anchu. All rights reserved.\n * @license Licensed under MIT\n */\n\nvar util = require('util');\nvar Store = require('./Store');\nvar Encrypter = require('encrypter');\n\n\n/**\n * Create a new session instance.\n *\n * @param  {String} name\n * @param  {Object} handler\n * @param  {Object|null} encrypter\n * @param  {String} secret - key for encryption\n * @param  {String|null} id\n */\nfunction EncryptedStore(name, handler, encrypter, secret, id) {\n    EncryptedStore.super_.apply(this, arguments);\n\n    if (!encrypter) {\n        encrypter = new Encrypter(secret);\n    }\n\n    this.__encrypter = encrypter;\n}\n\nutil.inherits(EncryptedStore, Store);\n\n/**\n * Prepare the raw string data from the session for JSON parse.\n *\n * @param  {String} data\n * @return {String}\n */\nEncryptedStore.prototype.__prepareForParse = function (data) {\n    return this.__encrypter.decrypt(data);\n};\n\n/**\n * Prepare the JSON string session data for storage.\n *\n * @param  {String} data\n * @return {String}\n */\nEncryptedStore.prototype.__prepareForStorage = function (data) {\n    return this.__encrypter.encrypt(data);\n};\n\nmodule.exports = EncryptedStore;"}